package lesson6;

import kotlin.NotImplementedError;

import java.util.*;

import static java.lang.Math.max;

@SuppressWarnings("unused")
public class JavaDynamicTasks {
    /**
     * Наибольшая общая подпоследовательность.
     * Средняя
     *
     * Дано две строки, например "nematode knowledge" и "empty bottle".
     * Найти их самую длинную общую подпоследовательность -- в примере это "emt ole".
     * Подпоследовательность отличается от подстроки тем, что её символы не обязаны идти подряд
     * (но по-прежнему должны быть расположены в исходной строке в том же порядке).
     * Если общей подпоследовательности нет, вернуть пустую строку.
     * Если есть несколько самых длинных общих подпоследовательностей, вернуть любую из них.
     * При сравнении подстрок, регистр символов *имеет* значение.
     */

    // Затрата времени O(n*m)             n и m - являются длинами двух послеовательностей
    // Затрата памяти  O(n+m)
    public static String longestCommonSubSequence(String first, String second) {
        int n = first.toLowerCase().length()
                , m = second.toLowerCase().length();
        int[][] num = new int[n+1][m+1];

        for (int i = 1; i <= first.length(); i++) {
            for (int j = 1; j <= second.length(); j++){
                if (first.charAt(i - 1) == (second.charAt(j - 1)))
                    num[i][j] = 1 + num[i - 1][j - 1];
                else
                    num[i][j] = max(num[i - 1][j], num[i][j - 1]);
            }
        }

        StringBuilder res = new StringBuilder();

        while (n != 0 && m != 0) {
            if (first.charAt(n - 1)==(second.charAt(m - 1)))
            {
                res.append(first.charAt(n-1));
                n--;
                m--;
            }
            else if (num[n][m - 1] >= num[n][m])
            {
                m--;
            }
            else
            {
                n--;
            }
        }
        res.reverse();
        return String.valueOf(res);
    }


        /**
         * Наибольшая возрастающая подпоследовательность
         * Сложная
         *
         * Дан список целых чисел, например, [2 8 5 9 12 6].
         * Найти в нём самую длинную возрастающую подпоследовательность.
         * Элементы подпоследовательности не обязаны идти подряд,
         * но должны быть расположены в исходном списке в том же порядке.
         * Если самых длинных возрастающих подпоследовательностей несколько (как в примере),
         * то вернуть ту, в которой числа расположены раньше (приоритет имеют первые числа).
         * В примере ответами являются 2, 8, 9, 12 или 2, 5, 9, 12 -- выбираем первую из них.
         */
    public static List<Integer> longestIncreasingSubSequence(List<Integer> list) {
throw new NotImplementedError();
    }
    /**
     * Самый короткий маршрут на прямоугольном поле.
     * Средняя
     *
     * В файле с именем inputName задано прямоугольное поле:
     *
     * 0 2 3 2 4 1
     * 1 5 3 4 6 2
     * 2 6 2 5 1 3
     * 1 4 3 2 6 2
     * 4 2 3 1 5 0
     *
     * Можно совершать шаги длиной в одну клетку вправо, вниз или по диагонали вправо-вниз.
     * В каждой клетке записано некоторое натуральное число или нуль.
     * Необходимо попасть из верхней левой клетки в правую нижнюю.
     * Вес маршрута вычисляется как сумма чисел со всех посещенных клеток.
     * Необходимо найти маршрут с минимальным весом и вернуть этот минимальный вес.
     *
     * Здесь ответ 2 + 3 + 4 + 1 + 2 = 12
     */
    public static int shortestPathOnField(String inputName) {
        throw new NotImplementedError();
    }

    // Задачу "Максимальное независимое множество вершин в графе без циклов"
    // смотрите в уроке 5
}
